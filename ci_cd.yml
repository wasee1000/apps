name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Flutter App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
      
      - name: Install dependencies
        run: |
          cd mobile_app
          flutter pub get
      
      - name: Analyze code
        run: |
          cd mobile_app
          flutter analyze
      
      - name: Run unit tests
        run: |
          cd mobile_app
          flutter test
      
      - name: Run integration tests
        run: |
          cd mobile_app
          flutter test integration_test

  build_android:
    name: Build Android App
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
      
      - name: Install dependencies
        run: |
          cd mobile_app
          flutter pub get
      
      - name: Build APK
        run: |
          cd mobile_app
          flutter build apk --release
      
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: mobile_app/build/app/outputs/flutter-apk/app-release.apk
      
      - name: Build App Bundle
        run: |
          cd mobile_app
          flutter build appbundle --release
      
      - name: Upload App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: app-release-bundle
          path: mobile_app/build/app/outputs/bundle/release/app-release.aab

  build_ios:
    name: Build iOS App
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.0'
          channel: 'stable'
      
      - name: Install dependencies
        run: |
          cd mobile_app
          flutter pub get
      
      - name: Build iOS
        run: |
          cd mobile_app
          flutter build ios --release --no-codesign
      
      - name: Upload iOS build
        uses: actions/upload-artifact@v3
        with:
          name: ios-build
          path: mobile_app/build/ios/iphoneos

  deploy_backend:
    name: Deploy Supabase Backend
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install Supabase CLI
        run: npm install -g supabase
      
      - name: Deploy Edge Functions
        run: |
          cd backend
          supabase login --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      
      - name: Deploy Database Migrations
        run: |
          cd backend
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

  deploy_android:
    name: Deploy Android App to Play Store
    needs: build_android
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download App Bundle
        uses: actions/download-artifact@v3
        with:
          name: app-release-bundle
          path: app-bundle
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
      
      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
          packageName: com.example.indian_tv_streaming_app
          releaseFiles: app-bundle/app-release.aab
          track: internal
          status: completed
          inAppUpdatePriority: 3
          userFraction: 0.5
          whatsNewDirectory: mobile_app/distribution/whatsnew

  deploy_ios:
    name: Deploy iOS App to TestFlight
    needs: build_ios
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download iOS Build
        uses: actions/download-artifact@v3
        with:
          name: ios-build
          path: ios-build
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
      
      - name: Install Fastlane
        run: gem install fastlane
      
      - name: Deploy to TestFlight
        run: |
          cd mobile_app/ios
          fastlane beta
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}

  notify:
    name: Notify Team
    needs: [deploy_android, deploy_ios, deploy_backend]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: |
            Android: ${{ needs.deploy_android.result }}
            iOS: ${{ needs.deploy_ios.result }}
            Backend: ${{ needs.deploy_backend.result }}
          SLACK_FOOTER: 'Indian TV Streaming App'

